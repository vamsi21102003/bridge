{"ast":null,"code":"/**\r\n * Dynamically loads a CSS stylesheet\r\n * @param {string} href - The path to the CSS file\r\n * @param {string} id - Optional ID for the link element\r\n * @returns {Promise} - Promise that resolves when CSS is loaded\r\n */\nexport const loadStylesheet = (href, id = null) => {\n  return new Promise((resolve, reject) => {\n    // Check if stylesheet is already loaded\n    if (id && document.getElementById(id)) {\n      resolve();\n      return;\n    }\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = href;\n    if (id) {\n      link.id = id;\n    }\n    link.onload = () => {\n      console.log(`CSS loaded successfully: ${href}`);\n      resolve();\n    };\n    link.onerror = error => {\n      console.error(`Failed to load CSS: ${href}`, error);\n      reject(new Error(`Failed to load stylesheet: ${href}`));\n    };\n    document.head.appendChild(link);\n  });\n};\n\n/**\r\n * Removes a dynamically loaded stylesheet\r\n * @param {string} id - The ID of the link element to remove\r\n */\nexport const removeStylesheet = id => {\n  const link = document.getElementById(id);\n  if (link) {\n    document.head.removeChild(link);\n    console.log(`CSS removed: ${id}`);\n  }\n};\n\n/**\r\n * Loads CSS conditionally based on navigation state\r\n * @param {string} navigationState - Current navigation state\r\n * @returns {Promise} - Promise that resolves when all required CSS is loaded\r\n */\nexport const loadConditionalCSS = async navigationState => {\n  const {\n    NAVIGATION_STATES\n  } = await import('../constants/navigationStates');\n  try {\n    // Always load bridge styles for bridge components\n    await loadStylesheet('./src/styles/bridge-styles/globals.css', 'bridge-globals');\n\n    // Load student styles when in student dashboard\n    if (navigationState === NAVIGATION_STATES.STUDENT_DASHBOARD) {\n      await Promise.all([loadStylesheet('./src/styles/student-styles/styles.css', 'student-styles'), loadStylesheet('./src/styles/student-styles/aipro.css', 'student-aipro'), loadStylesheet('./src/styles/student-styles/badge.css', 'student-badge'), loadStylesheet('./src/styles/student-styles/profileEdit.css', 'student-profile-edit')]);\n    } else {\n      // Remove student styles when not in student dashboard\n      removeStylesheet('student-styles');\n      removeStylesheet('student-aipro');\n      removeStylesheet('student-badge');\n      removeStylesheet('student-profile-edit');\n    }\n  } catch (error) {\n    console.error('Error loading conditional CSS:', error);\n    // Don't throw - CSS loading errors shouldn't break the app\n  }\n};\n\n/**\r\n * Preloads CSS files for faster navigation\r\n * @param {Array} cssFiles - Array of CSS file paths to preload\r\n */\nexport const preloadCSS = cssFiles => {\n  cssFiles.forEach(href => {\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.as = 'style';\n    link.href = href;\n    document.head.appendChild(link);\n  });\n};\n\n/**\r\n * Loads CSS with namespace isolation\r\n * @param {string} href - CSS file path\r\n * @param {string} namespace - Namespace for CSS isolation\r\n * @returns {Promise} - Promise that resolves when CSS is loaded\r\n */\nexport const loadNamespacedCSS = async (href, namespace) => {\n  try {\n    const response = await fetch(href);\n    const cssText = await response.text();\n\n    // Add namespace prefix to CSS rules (basic implementation)\n    const namespacedCSS = cssText.replace(/([^{}]+){/g, (match, selector) => {\n      // Skip @media, @keyframes, and other @ rules\n      if (selector.trim().startsWith('@')) {\n        return match;\n      }\n      // Add namespace prefix to selectors\n      const namespacedSelector = selector.split(',').map(s => `.${namespace} ${s.trim()}`).join(', ');\n      return `${namespacedSelector} {`;\n    });\n\n    // Create and inject style element\n    const style = document.createElement('style');\n    style.id = `${namespace}-styles`;\n    style.textContent = namespacedCSS;\n    document.head.appendChild(style);\n    console.log(`Namespaced CSS loaded: ${href} with namespace: ${namespace}`);\n  } catch (error) {\n    console.error(`Failed to load namespaced CSS: ${href}`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["loadStylesheet","href","id","Promise","resolve","reject","document","getElementById","link","createElement","rel","onload","console","log","onerror","error","Error","head","appendChild","removeStylesheet","removeChild","loadConditionalCSS","navigationState","NAVIGATION_STATES","STUDENT_DASHBOARD","all","preloadCSS","cssFiles","forEach","as","loadNamespacedCSS","namespace","response","fetch","cssText","text","namespacedCSS","replace","match","selector","trim","startsWith","namespacedSelector","split","map","s","join","style","textContent"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/utils/cssLoader.js"],"sourcesContent":["/**\r\n * Dynamically loads a CSS stylesheet\r\n * @param {string} href - The path to the CSS file\r\n * @param {string} id - Optional ID for the link element\r\n * @returns {Promise} - Promise that resolves when CSS is loaded\r\n */\r\nexport const loadStylesheet = (href, id = null) => {\r\n  return new Promise((resolve, reject) => {\r\n    // Check if stylesheet is already loaded\r\n    if (id && document.getElementById(id)) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = href;\r\n    if (id) {\r\n      link.id = id;\r\n    }\r\n    \r\n    link.onload = () => {\r\n      console.log(`CSS loaded successfully: ${href}`);\r\n      resolve();\r\n    };\r\n    \r\n    link.onerror = (error) => {\r\n      console.error(`Failed to load CSS: ${href}`, error);\r\n      reject(new Error(`Failed to load stylesheet: ${href}`));\r\n    };\r\n    \r\n    document.head.appendChild(link);\r\n  });\r\n};\r\n\r\n/**\r\n * Removes a dynamically loaded stylesheet\r\n * @param {string} id - The ID of the link element to remove\r\n */\r\nexport const removeStylesheet = (id) => {\r\n  const link = document.getElementById(id);\r\n  if (link) {\r\n    document.head.removeChild(link);\r\n    console.log(`CSS removed: ${id}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Loads CSS conditionally based on navigation state\r\n * @param {string} navigationState - Current navigation state\r\n * @returns {Promise} - Promise that resolves when all required CSS is loaded\r\n */\r\nexport const loadConditionalCSS = async (navigationState) => {\r\n  const { NAVIGATION_STATES } = await import('../constants/navigationStates');\r\n  \r\n  try {\r\n    // Always load bridge styles for bridge components\r\n    await loadStylesheet('./src/styles/bridge-styles/globals.css', 'bridge-globals');\r\n    \r\n    // Load student styles when in student dashboard\r\n    if (navigationState === NAVIGATION_STATES.STUDENT_DASHBOARD) {\r\n      await Promise.all([\r\n        loadStylesheet('./src/styles/student-styles/styles.css', 'student-styles'),\r\n        loadStylesheet('./src/styles/student-styles/aipro.css', 'student-aipro'),\r\n        loadStylesheet('./src/styles/student-styles/badge.css', 'student-badge'),\r\n        loadStylesheet('./src/styles/student-styles/profileEdit.css', 'student-profile-edit')\r\n      ]);\r\n    } else {\r\n      // Remove student styles when not in student dashboard\r\n      removeStylesheet('student-styles');\r\n      removeStylesheet('student-aipro');\r\n      removeStylesheet('student-badge');\r\n      removeStylesheet('student-profile-edit');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error loading conditional CSS:', error);\r\n    // Don't throw - CSS loading errors shouldn't break the app\r\n  }\r\n};\r\n\r\n/**\r\n * Preloads CSS files for faster navigation\r\n * @param {Array} cssFiles - Array of CSS file paths to preload\r\n */\r\nexport const preloadCSS = (cssFiles) => {\r\n  cssFiles.forEach(href => {\r\n    const link = document.createElement('link');\r\n    link.rel = 'preload';\r\n    link.as = 'style';\r\n    link.href = href;\r\n    document.head.appendChild(link);\r\n  });\r\n};\r\n\r\n/**\r\n * Loads CSS with namespace isolation\r\n * @param {string} href - CSS file path\r\n * @param {string} namespace - Namespace for CSS isolation\r\n * @returns {Promise} - Promise that resolves when CSS is loaded\r\n */\r\nexport const loadNamespacedCSS = async (href, namespace) => {\r\n  try {\r\n    const response = await fetch(href);\r\n    const cssText = await response.text();\r\n    \r\n    // Add namespace prefix to CSS rules (basic implementation)\r\n    const namespacedCSS = cssText.replace(\r\n      /([^{}]+){/g, \r\n      (match, selector) => {\r\n        // Skip @media, @keyframes, and other @ rules\r\n        if (selector.trim().startsWith('@')) {\r\n          return match;\r\n        }\r\n        // Add namespace prefix to selectors\r\n        const namespacedSelector = selector\r\n          .split(',')\r\n          .map(s => `.${namespace} ${s.trim()}`)\r\n          .join(', ');\r\n        return `${namespacedSelector} {`;\r\n      }\r\n    );\r\n    \r\n    // Create and inject style element\r\n    const style = document.createElement('style');\r\n    style.id = `${namespace}-styles`;\r\n    style.textContent = namespacedCSS;\r\n    document.head.appendChild(style);\r\n    \r\n    console.log(`Namespaced CSS loaded: ${href} with namespace: ${namespace}`);\r\n  } catch (error) {\r\n    console.error(`Failed to load namespaced CSS: ${href}`, error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}