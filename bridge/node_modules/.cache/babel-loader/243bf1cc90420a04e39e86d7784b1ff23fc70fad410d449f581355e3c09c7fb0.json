{"ast":null,"code":"import { NAVIGATION_STATES } from '../constants/navigationStates';\n\n/**\r\n * Handles navigation errors and provides safe fallback navigation\r\n * @param {Error} error - The error that occurred\r\n * @param {string} currentState - The current navigation state\r\n * @param {function} setCurrentPage - Function to set the current page\r\n * @returns {string} - The safe fallback state\r\n */\nexport const handleNavigationError = (error, currentState, setCurrentPage) => {\n  console.error('Navigation error:', error);\n  let fallbackState;\n\n  // Determine safe fallback based on current state\n  switch (currentState) {\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\n      // If student dashboard fails, go back to bridge home\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\n      break;\n    case NAVIGATION_STATES.LOGIN:\n      // If login fails, stay on bridge home\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\n      break;\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\n      // If profile completion fails, go back to login\n      fallbackState = NAVIGATION_STATES.LOGIN;\n      break;\n    case NAVIGATION_STATES.STUDENT_FORM:\n      // If student form fails, go back to profile completion\n      fallbackState = NAVIGATION_STATES.PROFILE_COMPLETION;\n      break;\n    default:\n      // Default fallback to bridge home\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\n  }\n\n  // Set the fallback state\n  if (setCurrentPage) {\n    setCurrentPage(fallbackState);\n  }\n  return fallbackState;\n};\n\n/**\r\n * Validates if a navigation state is valid\r\n * @param {string} state - The state to validate\r\n * @returns {boolean} - Whether the state is valid\r\n */\nexport const isValidNavigationState = state => {\n  return Object.values(NAVIGATION_STATES).includes(state);\n};\n\n/**\r\n * Gets the next valid state in the flow\r\n * @param {string} currentState - The current state\r\n * @param {object} userData - User data to determine flow\r\n * @returns {string} - The next state in the flow\r\n */\nexport const getNextNavigationState = (currentState, userData) => {\n  switch (currentState) {\n    case NAVIGATION_STATES.BRIDGE_HOME:\n      return NAVIGATION_STATES.LOGIN;\n    case NAVIGATION_STATES.LOGIN:\n      return NAVIGATION_STATES.PROFILE_COMPLETION;\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\n      if ((userData === null || userData === void 0 ? void 0 : userData.userType) === 'student') {\n        return NAVIGATION_STATES.STUDENT_FORM;\n      }\n      return NAVIGATION_STATES.BRIDGE_HOME;\n    case NAVIGATION_STATES.STUDENT_FORM:\n      return NAVIGATION_STATES.STUDENT_DASHBOARD;\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\n      return NAVIGATION_STATES.STUDENT_DASHBOARD;\n    // Stay in dashboard\n    default:\n      return NAVIGATION_STATES.BRIDGE_HOME;\n  }\n};\n\n/**\r\n * Gets the previous valid state in the flow\r\n * @param {string} currentState - The current state\r\n * @returns {string} - The previous state in the flow\r\n */\nexport const getPreviousNavigationState = currentState => {\n  switch (currentState) {\n    case NAVIGATION_STATES.LOGIN:\n      return NAVIGATION_STATES.BRIDGE_HOME;\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\n      return NAVIGATION_STATES.LOGIN;\n    case NAVIGATION_STATES.STUDENT_FORM:\n      return NAVIGATION_STATES.PROFILE_COMPLETION;\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\n      return NAVIGATION_STATES.BRIDGE_HOME;\n    // Logout goes to home\n    default:\n      return NAVIGATION_STATES.BRIDGE_HOME;\n  }\n};","map":{"version":3,"names":["NAVIGATION_STATES","handleNavigationError","error","currentState","setCurrentPage","console","fallbackState","STUDENT_DASHBOARD","BRIDGE_HOME","LOGIN","PROFILE_COMPLETION","STUDENT_FORM","isValidNavigationState","state","Object","values","includes","getNextNavigationState","userData","userType","getPreviousNavigationState"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/utils/navigationErrorHandler.js"],"sourcesContent":["import { NAVIGATION_STATES } from '../constants/navigationStates';\r\n\r\n/**\r\n * Handles navigation errors and provides safe fallback navigation\r\n * @param {Error} error - The error that occurred\r\n * @param {string} currentState - The current navigation state\r\n * @param {function} setCurrentPage - Function to set the current page\r\n * @returns {string} - The safe fallback state\r\n */\r\nexport const handleNavigationError = (error, currentState, setCurrentPage) => {\r\n  console.error('Navigation error:', error);\r\n  \r\n  let fallbackState;\r\n  \r\n  // Determine safe fallback based on current state\r\n  switch (currentState) {\r\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\r\n      // If student dashboard fails, go back to bridge home\r\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\r\n      break;\r\n    case NAVIGATION_STATES.LOGIN:\r\n      // If login fails, stay on bridge home\r\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\r\n      break;\r\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\r\n      // If profile completion fails, go back to login\r\n      fallbackState = NAVIGATION_STATES.LOGIN;\r\n      break;\r\n    case NAVIGATION_STATES.STUDENT_FORM:\r\n      // If student form fails, go back to profile completion\r\n      fallbackState = NAVIGATION_STATES.PROFILE_COMPLETION;\r\n      break;\r\n    default:\r\n      // Default fallback to bridge home\r\n      fallbackState = NAVIGATION_STATES.BRIDGE_HOME;\r\n  }\r\n  \r\n  // Set the fallback state\r\n  if (setCurrentPage) {\r\n    setCurrentPage(fallbackState);\r\n  }\r\n  \r\n  return fallbackState;\r\n};\r\n\r\n/**\r\n * Validates if a navigation state is valid\r\n * @param {string} state - The state to validate\r\n * @returns {boolean} - Whether the state is valid\r\n */\r\nexport const isValidNavigationState = (state) => {\r\n  return Object.values(NAVIGATION_STATES).includes(state);\r\n};\r\n\r\n/**\r\n * Gets the next valid state in the flow\r\n * @param {string} currentState - The current state\r\n * @param {object} userData - User data to determine flow\r\n * @returns {string} - The next state in the flow\r\n */\r\nexport const getNextNavigationState = (currentState, userData) => {\r\n  switch (currentState) {\r\n    case NAVIGATION_STATES.BRIDGE_HOME:\r\n      return NAVIGATION_STATES.LOGIN;\r\n    case NAVIGATION_STATES.LOGIN:\r\n      return NAVIGATION_STATES.PROFILE_COMPLETION;\r\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\r\n      if (userData?.userType === 'student') {\r\n        return NAVIGATION_STATES.STUDENT_FORM;\r\n      }\r\n      return NAVIGATION_STATES.BRIDGE_HOME;\r\n    case NAVIGATION_STATES.STUDENT_FORM:\r\n      return NAVIGATION_STATES.STUDENT_DASHBOARD;\r\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\r\n      return NAVIGATION_STATES.STUDENT_DASHBOARD; // Stay in dashboard\r\n    default:\r\n      return NAVIGATION_STATES.BRIDGE_HOME;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the previous valid state in the flow\r\n * @param {string} currentState - The current state\r\n * @returns {string} - The previous state in the flow\r\n */\r\nexport const getPreviousNavigationState = (currentState) => {\r\n  switch (currentState) {\r\n    case NAVIGATION_STATES.LOGIN:\r\n      return NAVIGATION_STATES.BRIDGE_HOME;\r\n    case NAVIGATION_STATES.PROFILE_COMPLETION:\r\n      return NAVIGATION_STATES.LOGIN;\r\n    case NAVIGATION_STATES.STUDENT_FORM:\r\n      return NAVIGATION_STATES.PROFILE_COMPLETION;\r\n    case NAVIGATION_STATES.STUDENT_DASHBOARD:\r\n      return NAVIGATION_STATES.BRIDGE_HOME; // Logout goes to home\r\n    default:\r\n      return NAVIGATION_STATES.BRIDGE_HOME;\r\n  }\r\n};"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,+BAA+B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,KAAK,EAAEC,YAAY,EAAEC,cAAc,KAAK;EAC5EC,OAAO,CAACH,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;EAEzC,IAAII,aAAa;;EAEjB;EACA,QAAQH,YAAY;IAClB,KAAKH,iBAAiB,CAACO,iBAAiB;MACtC;MACAD,aAAa,GAAGN,iBAAiB,CAACQ,WAAW;MAC7C;IACF,KAAKR,iBAAiB,CAACS,KAAK;MAC1B;MACAH,aAAa,GAAGN,iBAAiB,CAACQ,WAAW;MAC7C;IACF,KAAKR,iBAAiB,CAACU,kBAAkB;MACvC;MACAJ,aAAa,GAAGN,iBAAiB,CAACS,KAAK;MACvC;IACF,KAAKT,iBAAiB,CAACW,YAAY;MACjC;MACAL,aAAa,GAAGN,iBAAiB,CAACU,kBAAkB;MACpD;IACF;MACE;MACAJ,aAAa,GAAGN,iBAAiB,CAACQ,WAAW;EACjD;;EAEA;EACA,IAAIJ,cAAc,EAAE;IAClBA,cAAc,CAACE,aAAa,CAAC;EAC/B;EAEA,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,sBAAsB,GAAIC,KAAK,IAAK;EAC/C,OAAOC,MAAM,CAACC,MAAM,CAACf,iBAAiB,CAAC,CAACgB,QAAQ,CAACH,KAAK,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,sBAAsB,GAAGA,CAACd,YAAY,EAAEe,QAAQ,KAAK;EAChE,QAAQf,YAAY;IAClB,KAAKH,iBAAiB,CAACQ,WAAW;MAChC,OAAOR,iBAAiB,CAACS,KAAK;IAChC,KAAKT,iBAAiB,CAACS,KAAK;MAC1B,OAAOT,iBAAiB,CAACU,kBAAkB;IAC7C,KAAKV,iBAAiB,CAACU,kBAAkB;MACvC,IAAI,CAAAQ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,QAAQ,MAAK,SAAS,EAAE;QACpC,OAAOnB,iBAAiB,CAACW,YAAY;MACvC;MACA,OAAOX,iBAAiB,CAACQ,WAAW;IACtC,KAAKR,iBAAiB,CAACW,YAAY;MACjC,OAAOX,iBAAiB,CAACO,iBAAiB;IAC5C,KAAKP,iBAAiB,CAACO,iBAAiB;MACtC,OAAOP,iBAAiB,CAACO,iBAAiB;IAAE;IAC9C;MACE,OAAOP,iBAAiB,CAACQ,WAAW;EACxC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,0BAA0B,GAAIjB,YAAY,IAAK;EAC1D,QAAQA,YAAY;IAClB,KAAKH,iBAAiB,CAACS,KAAK;MAC1B,OAAOT,iBAAiB,CAACQ,WAAW;IACtC,KAAKR,iBAAiB,CAACU,kBAAkB;MACvC,OAAOV,iBAAiB,CAACS,KAAK;IAChC,KAAKT,iBAAiB,CAACW,YAAY;MACjC,OAAOX,iBAAiB,CAACU,kBAAkB;IAC7C,KAAKV,iBAAiB,CAACO,iBAAiB;MACtC,OAAOP,iBAAiB,CAACQ,WAAW;IAAE;IACxC;MACE,OAAOR,iBAAiB,CAACQ,WAAW;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}