{"ast":null,"code":"/**\r\n * Component Isolation Utilities\r\n * Provides utilities for ensuring proper component isolation and preventing conflicts\r\n */\n\n/**\r\n * CSS Isolation Manager\r\n * Ensures CSS styles don't leak between bridge and student components\r\n */\nexport class CSSIsolationManager {\n  constructor() {\n    this.isolatedComponents = new Set();\n    this.cssNamespaces = {\n      bridge: 'bridge-component',\n      student: 'student-app'\n    };\n  }\n\n  /**\r\n   * Register a component for CSS isolation\r\n   * @param {string} componentName - Name of the component\r\n   * @param {string} namespace - CSS namespace (bridge or student)\r\n   */\n  registerComponent(componentName, namespace) {\n    this.isolatedComponents.add(`${namespace}:${componentName}`);\n    console.log(`Registered ${componentName} with ${namespace} namespace`);\n  }\n\n  /**\r\n   * Check if a component is properly isolated\r\n   * @param {string} componentName - Name of the component\r\n   * @param {string} namespace - Expected namespace\r\n   * @returns {boolean} - Whether the component is isolated\r\n   */\n  isComponentIsolated(componentName, namespace) {\n    return this.isolatedComponents.has(`${namespace}:${componentName}`);\n  }\n\n  /**\r\n   * Get the CSS class for a namespace\r\n   * @param {string} namespace - The namespace (bridge or student)\r\n   * @returns {string} - The CSS class name\r\n   */\n  getNamespaceClass(namespace) {\n    return this.cssNamespaces[namespace] || '';\n  }\n\n  /**\r\n   * Validate CSS isolation for a DOM element\r\n   * @param {HTMLElement} element - The DOM element to check\r\n   * @param {string} expectedNamespace - Expected namespace\r\n   * @returns {boolean} - Whether the element has proper isolation\r\n   */\n  validateElementIsolation(element, expectedNamespace) {\n    if (!element) return false;\n    const expectedClass = this.getNamespaceClass(expectedNamespace);\n    if (!expectedClass) return false;\n\n    // Check if element or its ancestors have the namespace class\n    let currentElement = element;\n    while (currentElement) {\n      if (currentElement.classList && currentElement.classList.contains(expectedClass)) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n\n  /**\r\n   * Get isolation statistics\r\n   * @returns {object} - Isolation statistics\r\n   */\n  getIsolationStats() {\n    const stats = {\n      totalComponents: this.isolatedComponents.size,\n      bridgeComponents: 0,\n      studentComponents: 0,\n      components: Array.from(this.isolatedComponents)\n    };\n    this.isolatedComponents.forEach(component => {\n      if (component.startsWith('bridge:')) {\n        stats.bridgeComponents++;\n      } else if (component.startsWith('student:')) {\n        stats.studentComponents++;\n      }\n    });\n    return stats;\n  }\n}\n\n/**\r\n * State Isolation Manager\r\n * Prevents state conflicts between different parts of the application\r\n */\nexport class StateIsolationManager {\n  constructor() {\n    this.stateNamespaces = new Map();\n    this.stateWatchers = new Map();\n  }\n\n  /**\r\n   * Create an isolated state namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {object} initialState - Initial state for the namespace\r\n   */\n  createNamespace(namespace, initialState = {}) {\n    if (this.stateNamespaces.has(namespace)) {\n      console.warn(`State namespace ${namespace} already exists`);\n      return;\n    }\n    this.stateNamespaces.set(namespace, {\n      state: {\n        ...initialState\n      },\n      history: [{\n        ...initialState\n      }],\n      timestamp: Date.now()\n    });\n    console.log(`Created state namespace: ${namespace}`);\n  }\n\n  /**\r\n   * Update state in a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {object} updates - State updates\r\n   */\n  updateNamespaceState(namespace, updates) {\n    if (!this.stateNamespaces.has(namespace)) {\n      console.error(`State namespace ${namespace} does not exist`);\n      return;\n    }\n    const namespaceData = this.stateNamespaces.get(namespace);\n    const newState = {\n      ...namespaceData.state,\n      ...updates\n    };\n\n    // Update state and add to history\n    namespaceData.state = newState;\n    namespaceData.history.push({\n      ...newState\n    });\n    namespaceData.timestamp = Date.now();\n\n    // Notify watchers\n    if (this.stateWatchers.has(namespace)) {\n      this.stateWatchers.get(namespace).forEach(callback => {\n        try {\n          callback(newState, namespaceData.history);\n        } catch (error) {\n          console.error(`Error in state watcher for ${namespace}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\r\n   * Get state from a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @returns {object|null} - The namespace state\r\n   */\n  getNamespaceState(namespace) {\n    const namespaceData = this.stateNamespaces.get(namespace);\n    return namespaceData ? {\n      ...namespaceData.state\n    } : null;\n  }\n\n  /**\r\n   * Watch for state changes in a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {function} callback - Callback function for state changes\r\n   * @returns {function} - Unsubscribe function\r\n   */\n  watchNamespace(namespace, callback) {\n    if (!this.stateWatchers.has(namespace)) {\n      this.stateWatchers.set(namespace, new Set());\n    }\n    this.stateWatchers.get(namespace).add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      if (this.stateWatchers.has(namespace)) {\n        this.stateWatchers.get(namespace).delete(callback);\n      }\n    };\n  }\n\n  /**\r\n   * Clear a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   */\n  clearNamespace(namespace) {\n    this.stateNamespaces.delete(namespace);\n    this.stateWatchers.delete(namespace);\n    console.log(`Cleared state namespace: ${namespace}`);\n  }\n\n  /**\r\n   * Get isolation statistics\r\n   * @returns {object} - State isolation statistics\r\n   */\n  getStateStats() {\n    const stats = {\n      totalNamespaces: this.stateNamespaces.size,\n      totalWatchers: 0,\n      namespaces: {}\n    };\n    this.stateNamespaces.forEach((data, namespace) => {\n      const watchers = this.stateWatchers.get(namespace);\n      const watcherCount = watchers ? watchers.size : 0;\n      stats.totalWatchers += watcherCount;\n      stats.namespaces[namespace] = {\n        stateKeys: Object.keys(data.state),\n        historyLength: data.history.length,\n        watcherCount,\n        lastUpdate: data.timestamp\n      };\n    });\n    return stats;\n  }\n}\n\n// Create singleton instances\nexport const cssIsolationManager = new CSSIsolationManager();\nexport const stateIsolationManager = new StateIsolationManager();\n\n/**\r\n * Initialize component isolation\r\n * Sets up default namespaces and isolation rules\r\n */\nexport const initializeComponentIsolation = () => {\n  // Register default CSS namespaces\n  cssIsolationManager.registerComponent('App', 'bridge');\n  cssIsolationManager.registerComponent('StudentDashboard', 'student');\n\n  // Create default state namespaces\n  stateIsolationManager.createNamespace('bridge', {\n    currentPage: 'bridge_home',\n    userData: null,\n    isAuthenticated: false\n  });\n  stateIsolationManager.createNamespace('student', {\n    currentPage: 'home',\n    sidebarOpen: false,\n    searchQuery: ''\n  });\n  console.log('Component isolation initialized');\n};\n\n/**\r\n * Validate component isolation\r\n * Checks if all components are properly isolated\r\n * @returns {object} - Validation results\r\n */\nexport const validateComponentIsolation = () => {\n  const cssStats = cssIsolationManager.getIsolationStats();\n  const stateStats = stateIsolationManager.getStateStats();\n  const validation = {\n    css: {\n      isValid: cssStats.totalComponents > 0,\n      stats: cssStats\n    },\n    state: {\n      isValid: stateStats.totalNamespaces > 0,\n      stats: stateStats\n    },\n    overall: true\n  };\n  validation.overall = validation.css.isValid && validation.state.isValid;\n  return validation;\n};\nexport default {\n  CSSIsolationManager,\n  StateIsolationManager,\n  cssIsolationManager,\n  stateIsolationManager,\n  initializeComponentIsolation,\n  validateComponentIsolation\n};","map":{"version":3,"names":["CSSIsolationManager","constructor","isolatedComponents","Set","cssNamespaces","bridge","student","registerComponent","componentName","namespace","add","console","log","isComponentIsolated","has","getNamespaceClass","validateElementIsolation","element","expectedNamespace","expectedClass","currentElement","classList","contains","parentElement","getIsolationStats","stats","totalComponents","size","bridgeComponents","studentComponents","components","Array","from","forEach","component","startsWith","StateIsolationManager","stateNamespaces","Map","stateWatchers","createNamespace","initialState","warn","set","state","history","timestamp","Date","now","updateNamespaceState","updates","error","namespaceData","get","newState","push","callback","getNamespaceState","watchNamespace","delete","clearNamespace","getStateStats","totalNamespaces","totalWatchers","namespaces","data","watchers","watcherCount","stateKeys","Object","keys","historyLength","length","lastUpdate","cssIsolationManager","stateIsolationManager","initializeComponentIsolation","currentPage","userData","isAuthenticated","sidebarOpen","searchQuery","validateComponentIsolation","cssStats","stateStats","validation","css","isValid","overall"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/utils/componentIsolation.js"],"sourcesContent":["/**\r\n * Component Isolation Utilities\r\n * Provides utilities for ensuring proper component isolation and preventing conflicts\r\n */\r\n\r\n/**\r\n * CSS Isolation Manager\r\n * Ensures CSS styles don't leak between bridge and student components\r\n */\r\nexport class CSSIsolationManager {\r\n  constructor() {\r\n    this.isolatedComponents = new Set();\r\n    this.cssNamespaces = {\r\n      bridge: 'bridge-component',\r\n      student: 'student-app'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register a component for CSS isolation\r\n   * @param {string} componentName - Name of the component\r\n   * @param {string} namespace - CSS namespace (bridge or student)\r\n   */\r\n  registerComponent(componentName, namespace) {\r\n    this.isolatedComponents.add(`${namespace}:${componentName}`);\r\n    console.log(`Registered ${componentName} with ${namespace} namespace`);\r\n  }\r\n\r\n  /**\r\n   * Check if a component is properly isolated\r\n   * @param {string} componentName - Name of the component\r\n   * @param {string} namespace - Expected namespace\r\n   * @returns {boolean} - Whether the component is isolated\r\n   */\r\n  isComponentIsolated(componentName, namespace) {\r\n    return this.isolatedComponents.has(`${namespace}:${componentName}`);\r\n  }\r\n\r\n  /**\r\n   * Get the CSS class for a namespace\r\n   * @param {string} namespace - The namespace (bridge or student)\r\n   * @returns {string} - The CSS class name\r\n   */\r\n  getNamespaceClass(namespace) {\r\n    return this.cssNamespaces[namespace] || '';\r\n  }\r\n\r\n  /**\r\n   * Validate CSS isolation for a DOM element\r\n   * @param {HTMLElement} element - The DOM element to check\r\n   * @param {string} expectedNamespace - Expected namespace\r\n   * @returns {boolean} - Whether the element has proper isolation\r\n   */\r\n  validateElementIsolation(element, expectedNamespace) {\r\n    if (!element) return false;\r\n    \r\n    const expectedClass = this.getNamespaceClass(expectedNamespace);\r\n    if (!expectedClass) return false;\r\n\r\n    // Check if element or its ancestors have the namespace class\r\n    let currentElement = element;\r\n    while (currentElement) {\r\n      if (currentElement.classList && currentElement.classList.contains(expectedClass)) {\r\n        return true;\r\n      }\r\n      currentElement = currentElement.parentElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get isolation statistics\r\n   * @returns {object} - Isolation statistics\r\n   */\r\n  getIsolationStats() {\r\n    const stats = {\r\n      totalComponents: this.isolatedComponents.size,\r\n      bridgeComponents: 0,\r\n      studentComponents: 0,\r\n      components: Array.from(this.isolatedComponents)\r\n    };\r\n\r\n    this.isolatedComponents.forEach(component => {\r\n      if (component.startsWith('bridge:')) {\r\n        stats.bridgeComponents++;\r\n      } else if (component.startsWith('student:')) {\r\n        stats.studentComponents++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * State Isolation Manager\r\n * Prevents state conflicts between different parts of the application\r\n */\r\nexport class StateIsolationManager {\r\n  constructor() {\r\n    this.stateNamespaces = new Map();\r\n    this.stateWatchers = new Map();\r\n  }\r\n\r\n  /**\r\n   * Create an isolated state namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {object} initialState - Initial state for the namespace\r\n   */\r\n  createNamespace(namespace, initialState = {}) {\r\n    if (this.stateNamespaces.has(namespace)) {\r\n      console.warn(`State namespace ${namespace} already exists`);\r\n      return;\r\n    }\r\n\r\n    this.stateNamespaces.set(namespace, {\r\n      state: { ...initialState },\r\n      history: [{ ...initialState }],\r\n      timestamp: Date.now()\r\n    });\r\n\r\n    console.log(`Created state namespace: ${namespace}`);\r\n  }\r\n\r\n  /**\r\n   * Update state in a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {object} updates - State updates\r\n   */\r\n  updateNamespaceState(namespace, updates) {\r\n    if (!this.stateNamespaces.has(namespace)) {\r\n      console.error(`State namespace ${namespace} does not exist`);\r\n      return;\r\n    }\r\n\r\n    const namespaceData = this.stateNamespaces.get(namespace);\r\n    const newState = { ...namespaceData.state, ...updates };\r\n    \r\n    // Update state and add to history\r\n    namespaceData.state = newState;\r\n    namespaceData.history.push({ ...newState });\r\n    namespaceData.timestamp = Date.now();\r\n\r\n    // Notify watchers\r\n    if (this.stateWatchers.has(namespace)) {\r\n      this.stateWatchers.get(namespace).forEach(callback => {\r\n        try {\r\n          callback(newState, namespaceData.history);\r\n        } catch (error) {\r\n          console.error(`Error in state watcher for ${namespace}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get state from a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @returns {object|null} - The namespace state\r\n   */\r\n  getNamespaceState(namespace) {\r\n    const namespaceData = this.stateNamespaces.get(namespace);\r\n    return namespaceData ? { ...namespaceData.state } : null;\r\n  }\r\n\r\n  /**\r\n   * Watch for state changes in a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   * @param {function} callback - Callback function for state changes\r\n   * @returns {function} - Unsubscribe function\r\n   */\r\n  watchNamespace(namespace, callback) {\r\n    if (!this.stateWatchers.has(namespace)) {\r\n      this.stateWatchers.set(namespace, new Set());\r\n    }\r\n\r\n    this.stateWatchers.get(namespace).add(callback);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      if (this.stateWatchers.has(namespace)) {\r\n        this.stateWatchers.get(namespace).delete(callback);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear a namespace\r\n   * @param {string} namespace - The namespace identifier\r\n   */\r\n  clearNamespace(namespace) {\r\n    this.stateNamespaces.delete(namespace);\r\n    this.stateWatchers.delete(namespace);\r\n    console.log(`Cleared state namespace: ${namespace}`);\r\n  }\r\n\r\n  /**\r\n   * Get isolation statistics\r\n   * @returns {object} - State isolation statistics\r\n   */\r\n  getStateStats() {\r\n    const stats = {\r\n      totalNamespaces: this.stateNamespaces.size,\r\n      totalWatchers: 0,\r\n      namespaces: {}\r\n    };\r\n\r\n    this.stateNamespaces.forEach((data, namespace) => {\r\n      const watchers = this.stateWatchers.get(namespace);\r\n      const watcherCount = watchers ? watchers.size : 0;\r\n      \r\n      stats.totalWatchers += watcherCount;\r\n      stats.namespaces[namespace] = {\r\n        stateKeys: Object.keys(data.state),\r\n        historyLength: data.history.length,\r\n        watcherCount,\r\n        lastUpdate: data.timestamp\r\n      };\r\n    });\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n// Create singleton instances\r\nexport const cssIsolationManager = new CSSIsolationManager();\r\nexport const stateIsolationManager = new StateIsolationManager();\r\n\r\n/**\r\n * Initialize component isolation\r\n * Sets up default namespaces and isolation rules\r\n */\r\nexport const initializeComponentIsolation = () => {\r\n  // Register default CSS namespaces\r\n  cssIsolationManager.registerComponent('App', 'bridge');\r\n  cssIsolationManager.registerComponent('StudentDashboard', 'student');\r\n\r\n  // Create default state namespaces\r\n  stateIsolationManager.createNamespace('bridge', {\r\n    currentPage: 'bridge_home',\r\n    userData: null,\r\n    isAuthenticated: false\r\n  });\r\n\r\n  stateIsolationManager.createNamespace('student', {\r\n    currentPage: 'home',\r\n    sidebarOpen: false,\r\n    searchQuery: ''\r\n  });\r\n\r\n  console.log('Component isolation initialized');\r\n};\r\n\r\n/**\r\n * Validate component isolation\r\n * Checks if all components are properly isolated\r\n * @returns {object} - Validation results\r\n */\r\nexport const validateComponentIsolation = () => {\r\n  const cssStats = cssIsolationManager.getIsolationStats();\r\n  const stateStats = stateIsolationManager.getStateStats();\r\n\r\n  const validation = {\r\n    css: {\r\n      isValid: cssStats.totalComponents > 0,\r\n      stats: cssStats\r\n    },\r\n    state: {\r\n      isValid: stateStats.totalNamespaces > 0,\r\n      stats: stateStats\r\n    },\r\n    overall: true\r\n  };\r\n\r\n  validation.overall = validation.css.isValid && validation.state.isValid;\r\n\r\n  return validation;\r\n};\r\n\r\nexport default {\r\n  CSSIsolationManager,\r\n  StateIsolationManager,\r\n  cssIsolationManager,\r\n  stateIsolationManager,\r\n  initializeComponentIsolation,\r\n  validateComponentIsolation\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}