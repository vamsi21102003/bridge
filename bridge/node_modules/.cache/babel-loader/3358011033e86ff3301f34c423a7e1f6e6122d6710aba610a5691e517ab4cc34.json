{"ast":null,"code":"// API service for BriDGe backend\nconst API_BASE_URL = 'http://localhost:3001';\nclass ApiService {\n  // Helper method for making API requests\n  static async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // User Authentication\n  static async login(email, password) {\n    return this.request('/api/users/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  static async register(userData) {\n    return this.request('/api/users/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  static async getUserProfile(userId) {\n    return this.request(`/api/users/${userId}/profile`);\n  }\n\n  // Opportunities\n  static async getOpportunities(filters = {}) {\n    const queryParams = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        queryParams.append(key, value);\n      }\n    });\n    const queryString = queryParams.toString();\n    const endpoint = `/api/opportunities${queryString ? `?${queryString}` : ''}`;\n    return this.request(endpoint);\n  }\n  static async getOpportunity(id) {\n    return this.request(`/api/opportunities/${id}`);\n  }\n  static async createOpportunity(opportunityData) {\n    return this.request('/api/opportunities', {\n      method: 'POST',\n      body: JSON.stringify(opportunityData)\n    });\n  }\n\n  // Applications\n  static async submitApplication(applicationData) {\n    return this.request('/api/applications', {\n      method: 'POST',\n      body: JSON.stringify(applicationData)\n    });\n  }\n  static async getStudentApplications(studentId, filters = {}) {\n    const queryParams = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        queryParams.append(key, value);\n      }\n    });\n    const queryString = queryParams.toString();\n    const endpoint = `/api/applications/student/${studentId}${queryString ? `?${queryString}` : ''}`;\n    return this.request(endpoint);\n  }\n  static async getOpportunityApplications(opportunityId, filters = {}) {\n    const queryParams = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        queryParams.append(key, value);\n      }\n    });\n    const queryString = queryParams.toString();\n    const endpoint = `/api/applications/opportunity/${opportunityId}${queryString ? `?${queryString}` : ''}`;\n    return this.request(endpoint);\n  }\n\n  // Statistics\n  static async getUserStats() {\n    return this.request('/api/stats/users');\n  }\n  static async getOpportunityStats(employerId = null) {\n    const endpoint = employerId ? `/api/stats/opportunities?employer_id=${employerId}` : '/api/stats/opportunities';\n    return this.request(endpoint);\n  }\n\n  // Health check\n  static async healthCheck() {\n    return this.request('/health');\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","status","console","login","email","password","method","body","JSON","stringify","register","userData","getUserProfile","userId","getOpportunities","filters","queryParams","URLSearchParams","Object","entries","forEach","key","value","undefined","append","queryString","toString","getOpportunity","id","createOpportunity","opportunityData","submitApplication","applicationData","getStudentApplications","studentId","getOpportunityApplications","opportunityId","getUserStats","getOpportunityStats","employerId","healthCheck"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/services/api.js"],"sourcesContent":["// API service for BriDGe backend\r\nconst API_BASE_URL = 'http://localhost:3001';\r\n\r\nclass ApiService {\r\n  // Helper method for making API requests\r\n  static async request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error(`API request failed: ${endpoint}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // User Authentication\r\n  static async login(email, password) {\r\n    return this.request('/api/users/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  }\r\n\r\n  static async register(userData) {\r\n    return this.request('/api/users/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  static async getUserProfile(userId) {\r\n    return this.request(`/api/users/${userId}/profile`);\r\n  }\r\n\r\n  // Opportunities\r\n  static async getOpportunities(filters = {}) {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== null && value !== undefined && value !== '') {\r\n        queryParams.append(key, value);\r\n      }\r\n    });\r\n\r\n    const queryString = queryParams.toString();\r\n    const endpoint = `/api/opportunities${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return this.request(endpoint);\r\n  }\r\n\r\n  static async getOpportunity(id) {\r\n    return this.request(`/api/opportunities/${id}`);\r\n  }\r\n\r\n  static async createOpportunity(opportunityData) {\r\n    return this.request('/api/opportunities', {\r\n      method: 'POST',\r\n      body: JSON.stringify(opportunityData),\r\n    });\r\n  }\r\n\r\n  // Applications\r\n  static async submitApplication(applicationData) {\r\n    return this.request('/api/applications', {\r\n      method: 'POST',\r\n      body: JSON.stringify(applicationData),\r\n    });\r\n  }\r\n\r\n  static async getStudentApplications(studentId, filters = {}) {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== null && value !== undefined && value !== '') {\r\n        queryParams.append(key, value);\r\n      }\r\n    });\r\n\r\n    const queryString = queryParams.toString();\r\n    const endpoint = `/api/applications/student/${studentId}${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return this.request(endpoint);\r\n  }\r\n\r\n  static async getOpportunityApplications(opportunityId, filters = {}) {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value !== null && value !== undefined && value !== '') {\r\n        queryParams.append(key, value);\r\n      }\r\n    });\r\n\r\n    const queryString = queryParams.toString();\r\n    const endpoint = `/api/applications/opportunity/${opportunityId}${queryString ? `?${queryString}` : ''}`;\r\n    \r\n    return this.request(endpoint);\r\n  }\r\n\r\n  // Statistics\r\n  static async getUserStats() {\r\n    return this.request('/api/stats/users');\r\n  }\r\n\r\n  static async getOpportunityStats(employerId = null) {\r\n    const endpoint = employerId \r\n      ? `/api/stats/opportunities?employer_id=${employerId}`\r\n      : '/api/stats/opportunities';\r\n    \r\n    return this.request(endpoint);\r\n  }\r\n\r\n  // Health check\r\n  static async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\nexport default ApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}