{"ast":null,"code":"/**\r\n * CSS Namespacing utilities to prevent conflicts between bridge and student styles\r\n */\n\n// CSS class prefixes for different components\nexport const CSS_PREFIXES = {\n  BRIDGE: 'bridge-',\n  STUDENT: 'student-',\n  SHARED: 'shared-'\n};\n\n/**\r\n * Adds namespace prefix to CSS classes\r\n * @param {string} className - The original class name\r\n * @param {string} namespace - The namespace prefix (bridge-, student-, shared-)\r\n * @returns {string} - The namespaced class name\r\n */\nexport const addNamespace = (className, namespace) => {\n  if (!className || className.startsWith(namespace)) {\n    return className;\n  }\n  return `${namespace}${className}`;\n};\n\n/**\r\n * Creates namespaced class names for bridge components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\nexport const bridgeClasses = classNames => {\n  if (Array.isArray(classNames)) {\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.BRIDGE)).join(' ');\n  }\n  return addNamespace(classNames, CSS_PREFIXES.BRIDGE);\n};\n\n/**\r\n * Creates namespaced class names for student components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\nexport const studentClasses = classNames => {\n  if (Array.isArray(classNames)) {\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.STUDENT)).join(' ');\n  }\n  return addNamespace(classNames, CSS_PREFIXES.STUDENT);\n};\n\n/**\r\n * Creates namespaced class names for shared components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\nexport const sharedClasses = classNames => {\n  if (Array.isArray(classNames)) {\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.SHARED)).join(' ');\n  }\n  return addNamespace(classNames, CSS_PREFIXES.SHARED);\n};\n\n/**\r\n * Conditionally applies CSS classes based on navigation state\r\n * @param {string} navigationState - Current navigation state\r\n * @param {object} classMap - Object mapping states to class names\r\n * @returns {string} - Appropriate class names for current state\r\n */\nexport const conditionalClasses = (navigationState, classMap) => {\n  const {\n    NAVIGATION_STATES\n  } = require('../constants/navigationStates');\n\n  // Default classes that apply to all states\n  let classes = classMap.default || '';\n\n  // Add state-specific classes\n  if (classMap[navigationState]) {\n    classes += ` ${classMap[navigationState]}`;\n  }\n\n  // Add bridge-specific classes for pre-login states\n  if ([NAVIGATION_STATES.BRIDGE_HOME, NAVIGATION_STATES.LOGIN, NAVIGATION_STATES.PROFILE_COMPLETION, NAVIGATION_STATES.STUDENT_FORM].includes(navigationState)) {\n    classes += ` ${bridgeClasses('container')}`;\n  }\n\n  // Add student-specific classes for post-login states\n  if (navigationState === NAVIGATION_STATES.STUDENT_DASHBOARD) {\n    classes += ` ${studentClasses('container')}`;\n  }\n  return classes.trim();\n};\n\n/**\r\n * Generates CSS variable names with namespace\r\n * @param {string} variableName - The CSS variable name\r\n * @param {string} namespace - The namespace prefix\r\n * @returns {string} - Namespaced CSS variable\r\n */\nexport const cssVariable = (variableName, namespace = CSS_PREFIXES.SHARED) => {\n  return `--${namespace}${variableName}`;\n};\n\n/**\r\n * Creates a CSS-in-JS style object with namespaced variables\r\n * @param {object} styles - Style object with CSS properties\r\n * @param {string} namespace - The namespace prefix\r\n * @returns {object} - Style object with namespaced CSS variables\r\n */\nexport const namespacedStyles = (styles, namespace = CSS_PREFIXES.SHARED) => {\n  const namespacedStyleObj = {};\n  Object.keys(styles).forEach(key => {\n    if (typeof styles[key] === 'string' && styles[key].startsWith('var(--')) {\n      var _styles$key$match;\n      // Replace CSS variables with namespaced versions\n      const variableName = (_styles$key$match = styles[key].match(/var\\(--(.+)\\)/)) === null || _styles$key$match === void 0 ? void 0 : _styles$key$match[1];\n      if (variableName) {\n        namespacedStyleObj[key] = `var(${cssVariable(variableName, namespace)})`;\n      }\n    } else {\n      namespacedStyleObj[key] = styles[key];\n    }\n  });\n  return namespacedStyleObj;\n};\n\n/**\r\n * Utility to merge multiple class name strings safely\r\n * @param {...string} classNames - Multiple class name strings\r\n * @returns {string} - Merged and deduplicated class names\r\n */\nexport const mergeClasses = (...classNames) => {\n  return classNames.filter(Boolean).join(' ').split(' ').filter((cls, index, arr) => cls && arr.indexOf(cls) === index).join(' ');\n};\n\n/**\r\n * Checks if a CSS class belongs to a specific namespace\r\n * @param {string} className - The class name to check\r\n * @param {string} namespace - The namespace to check against\r\n * @returns {boolean} - Whether the class belongs to the namespace\r\n */\nexport const belongsToNamespace = (className, namespace) => {\n  return className && className.startsWith(namespace);\n};\n\n/**\r\n * Removes namespace prefix from a class name\r\n * @param {string} className - The namespaced class name\r\n * @param {string} namespace - The namespace to remove\r\n * @returns {string} - Class name without namespace\r\n */\nexport const removeNamespace = (className, namespace) => {\n  if (belongsToNamespace(className, namespace)) {\n    return className.substring(namespace.length);\n  }\n  return className;\n};","map":{"version":3,"names":["CSS_PREFIXES","BRIDGE","STUDENT","SHARED","addNamespace","className","namespace","startsWith","bridgeClasses","classNames","Array","isArray","map","cls","join","studentClasses","sharedClasses","conditionalClasses","navigationState","classMap","NAVIGATION_STATES","require","classes","default","BRIDGE_HOME","LOGIN","PROFILE_COMPLETION","STUDENT_FORM","includes","STUDENT_DASHBOARD","trim","cssVariable","variableName","namespacedStyles","styles","namespacedStyleObj","Object","keys","forEach","key","_styles$key$match","match","mergeClasses","filter","Boolean","split","index","arr","indexOf","belongsToNamespace","removeNamespace","substring","length"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/utils/cssNamespacing.js"],"sourcesContent":["/**\r\n * CSS Namespacing utilities to prevent conflicts between bridge and student styles\r\n */\r\n\r\n// CSS class prefixes for different components\r\nexport const CSS_PREFIXES = {\r\n  BRIDGE: 'bridge-',\r\n  STUDENT: 'student-',\r\n  SHARED: 'shared-'\r\n};\r\n\r\n/**\r\n * Adds namespace prefix to CSS classes\r\n * @param {string} className - The original class name\r\n * @param {string} namespace - The namespace prefix (bridge-, student-, shared-)\r\n * @returns {string} - The namespaced class name\r\n */\r\nexport const addNamespace = (className, namespace) => {\r\n  if (!className || className.startsWith(namespace)) {\r\n    return className;\r\n  }\r\n  return `${namespace}${className}`;\r\n};\r\n\r\n/**\r\n * Creates namespaced class names for bridge components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\r\nexport const bridgeClasses = (classNames) => {\r\n  if (Array.isArray(classNames)) {\r\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.BRIDGE)).join(' ');\r\n  }\r\n  return addNamespace(classNames, CSS_PREFIXES.BRIDGE);\r\n};\r\n\r\n/**\r\n * Creates namespaced class names for student components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\r\nexport const studentClasses = (classNames) => {\r\n  if (Array.isArray(classNames)) {\r\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.STUDENT)).join(' ');\r\n  }\r\n  return addNamespace(classNames, CSS_PREFIXES.STUDENT);\r\n};\r\n\r\n/**\r\n * Creates namespaced class names for shared components\r\n * @param {string|Array} classNames - Class name(s) to namespace\r\n * @returns {string} - Namespaced class names\r\n */\r\nexport const sharedClasses = (classNames) => {\r\n  if (Array.isArray(classNames)) {\r\n    return classNames.map(cls => addNamespace(cls, CSS_PREFIXES.SHARED)).join(' ');\r\n  }\r\n  return addNamespace(classNames, CSS_PREFIXES.SHARED);\r\n};\r\n\r\n/**\r\n * Conditionally applies CSS classes based on navigation state\r\n * @param {string} navigationState - Current navigation state\r\n * @param {object} classMap - Object mapping states to class names\r\n * @returns {string} - Appropriate class names for current state\r\n */\r\nexport const conditionalClasses = (navigationState, classMap) => {\r\n  const { NAVIGATION_STATES } = require('../constants/navigationStates');\r\n  \r\n  // Default classes that apply to all states\r\n  let classes = classMap.default || '';\r\n  \r\n  // Add state-specific classes\r\n  if (classMap[navigationState]) {\r\n    classes += ` ${classMap[navigationState]}`;\r\n  }\r\n  \r\n  // Add bridge-specific classes for pre-login states\r\n  if ([\r\n    NAVIGATION_STATES.BRIDGE_HOME,\r\n    NAVIGATION_STATES.LOGIN,\r\n    NAVIGATION_STATES.PROFILE_COMPLETION,\r\n    NAVIGATION_STATES.STUDENT_FORM\r\n  ].includes(navigationState)) {\r\n    classes += ` ${bridgeClasses('container')}`;\r\n  }\r\n  \r\n  // Add student-specific classes for post-login states\r\n  if (navigationState === NAVIGATION_STATES.STUDENT_DASHBOARD) {\r\n    classes += ` ${studentClasses('container')}`;\r\n  }\r\n  \r\n  return classes.trim();\r\n};\r\n\r\n/**\r\n * Generates CSS variable names with namespace\r\n * @param {string} variableName - The CSS variable name\r\n * @param {string} namespace - The namespace prefix\r\n * @returns {string} - Namespaced CSS variable\r\n */\r\nexport const cssVariable = (variableName, namespace = CSS_PREFIXES.SHARED) => {\r\n  return `--${namespace}${variableName}`;\r\n};\r\n\r\n/**\r\n * Creates a CSS-in-JS style object with namespaced variables\r\n * @param {object} styles - Style object with CSS properties\r\n * @param {string} namespace - The namespace prefix\r\n * @returns {object} - Style object with namespaced CSS variables\r\n */\r\nexport const namespacedStyles = (styles, namespace = CSS_PREFIXES.SHARED) => {\r\n  const namespacedStyleObj = {};\r\n  \r\n  Object.keys(styles).forEach(key => {\r\n    if (typeof styles[key] === 'string' && styles[key].startsWith('var(--')) {\r\n      // Replace CSS variables with namespaced versions\r\n      const variableName = styles[key].match(/var\\(--(.+)\\)/)?.[1];\r\n      if (variableName) {\r\n        namespacedStyleObj[key] = `var(${cssVariable(variableName, namespace)})`;\r\n      }\r\n    } else {\r\n      namespacedStyleObj[key] = styles[key];\r\n    }\r\n  });\r\n  \r\n  return namespacedStyleObj;\r\n};\r\n\r\n/**\r\n * Utility to merge multiple class name strings safely\r\n * @param {...string} classNames - Multiple class name strings\r\n * @returns {string} - Merged and deduplicated class names\r\n */\r\nexport const mergeClasses = (...classNames) => {\r\n  return classNames\r\n    .filter(Boolean)\r\n    .join(' ')\r\n    .split(' ')\r\n    .filter((cls, index, arr) => cls && arr.indexOf(cls) === index)\r\n    .join(' ');\r\n};\r\n\r\n/**\r\n * Checks if a CSS class belongs to a specific namespace\r\n * @param {string} className - The class name to check\r\n * @param {string} namespace - The namespace to check against\r\n * @returns {boolean} - Whether the class belongs to the namespace\r\n */\r\nexport const belongsToNamespace = (className, namespace) => {\r\n  return className && className.startsWith(namespace);\r\n};\r\n\r\n/**\r\n * Removes namespace prefix from a class name\r\n * @param {string} className - The namespaced class name\r\n * @param {string} namespace - The namespace to remove\r\n * @returns {string} - Class name without namespace\r\n */\r\nexport const removeNamespace = (className, namespace) => {\r\n  if (belongsToNamespace(className, namespace)) {\r\n    return className.substring(namespace.length);\r\n  }\r\n  return className;\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG;EAC1BC,MAAM,EAAE,SAAS;EACjBC,OAAO,EAAE,UAAU;EACnBC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,SAAS,EAAEC,SAAS,KAAK;EACpD,IAAI,CAACD,SAAS,IAAIA,SAAS,CAACE,UAAU,CAACD,SAAS,CAAC,EAAE;IACjD,OAAOD,SAAS;EAClB;EACA,OAAO,GAAGC,SAAS,GAAGD,SAAS,EAAE;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAIC,UAAU,IAAK;EAC3C,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;IAC7B,OAAOA,UAAU,CAACG,GAAG,CAACC,GAAG,IAAIT,YAAY,CAACS,GAAG,EAAEb,YAAY,CAACC,MAAM,CAAC,CAAC,CAACa,IAAI,CAAC,GAAG,CAAC;EAChF;EACA,OAAOV,YAAY,CAACK,UAAU,EAAET,YAAY,CAACC,MAAM,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,cAAc,GAAIN,UAAU,IAAK;EAC5C,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;IAC7B,OAAOA,UAAU,CAACG,GAAG,CAACC,GAAG,IAAIT,YAAY,CAACS,GAAG,EAAEb,YAAY,CAACE,OAAO,CAAC,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;EACjF;EACA,OAAOV,YAAY,CAACK,UAAU,EAAET,YAAY,CAACE,OAAO,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,aAAa,GAAIP,UAAU,IAAK;EAC3C,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;IAC7B,OAAOA,UAAU,CAACG,GAAG,CAACC,GAAG,IAAIT,YAAY,CAACS,GAAG,EAAEb,YAAY,CAACG,MAAM,CAAC,CAAC,CAACW,IAAI,CAAC,GAAG,CAAC;EAChF;EACA,OAAOV,YAAY,CAACK,UAAU,EAAET,YAAY,CAACG,MAAM,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,kBAAkB,GAAGA,CAACC,eAAe,EAAEC,QAAQ,KAAK;EAC/D,MAAM;IAAEC;EAAkB,CAAC,GAAGC,OAAO,CAAC,+BAA+B,CAAC;;EAEtE;EACA,IAAIC,OAAO,GAAGH,QAAQ,CAACI,OAAO,IAAI,EAAE;;EAEpC;EACA,IAAIJ,QAAQ,CAACD,eAAe,CAAC,EAAE;IAC7BI,OAAO,IAAI,IAAIH,QAAQ,CAACD,eAAe,CAAC,EAAE;EAC5C;;EAEA;EACA,IAAI,CACFE,iBAAiB,CAACI,WAAW,EAC7BJ,iBAAiB,CAACK,KAAK,EACvBL,iBAAiB,CAACM,kBAAkB,EACpCN,iBAAiB,CAACO,YAAY,CAC/B,CAACC,QAAQ,CAACV,eAAe,CAAC,EAAE;IAC3BI,OAAO,IAAI,IAAId,aAAa,CAAC,WAAW,CAAC,EAAE;EAC7C;;EAEA;EACA,IAAIU,eAAe,KAAKE,iBAAiB,CAACS,iBAAiB,EAAE;IAC3DP,OAAO,IAAI,IAAIP,cAAc,CAAC,WAAW,CAAC,EAAE;EAC9C;EAEA,OAAOO,OAAO,CAACQ,IAAI,CAAC,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,YAAY,EAAE1B,SAAS,GAAGN,YAAY,CAACG,MAAM,KAAK;EAC5E,OAAO,KAAKG,SAAS,GAAG0B,YAAY,EAAE;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAE5B,SAAS,GAAGN,YAAY,CAACG,MAAM,KAAK;EAC3E,MAAMgC,kBAAkB,GAAG,CAAC,CAAC;EAE7BC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;IACjC,IAAI,OAAOL,MAAM,CAACK,GAAG,CAAC,KAAK,QAAQ,IAAIL,MAAM,CAACK,GAAG,CAAC,CAAChC,UAAU,CAAC,QAAQ,CAAC,EAAE;MAAA,IAAAiC,iBAAA;MACvE;MACA,MAAMR,YAAY,IAAAQ,iBAAA,GAAGN,MAAM,CAACK,GAAG,CAAC,CAACE,KAAK,CAAC,eAAe,CAAC,cAAAD,iBAAA,uBAAlCA,iBAAA,CAAqC,CAAC,CAAC;MAC5D,IAAIR,YAAY,EAAE;QAChBG,kBAAkB,CAACI,GAAG,CAAC,GAAG,OAAOR,WAAW,CAACC,YAAY,EAAE1B,SAAS,CAAC,GAAG;MAC1E;IACF,CAAC,MAAM;MACL6B,kBAAkB,CAACI,GAAG,CAAC,GAAGL,MAAM,CAACK,GAAG,CAAC;IACvC;EACF,CAAC,CAAC;EAEF,OAAOJ,kBAAkB;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC,GAAGjC,UAAU,KAAK;EAC7C,OAAOA,UAAU,CACdkC,MAAM,CAACC,OAAO,CAAC,CACf9B,IAAI,CAAC,GAAG,CAAC,CACT+B,KAAK,CAAC,GAAG,CAAC,CACVF,MAAM,CAAC,CAAC9B,GAAG,EAAEiC,KAAK,EAAEC,GAAG,KAAKlC,GAAG,IAAIkC,GAAG,CAACC,OAAO,CAACnC,GAAG,CAAC,KAAKiC,KAAK,CAAC,CAC9DhC,IAAI,CAAC,GAAG,CAAC;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmC,kBAAkB,GAAGA,CAAC5C,SAAS,EAAEC,SAAS,KAAK;EAC1D,OAAOD,SAAS,IAAIA,SAAS,CAACE,UAAU,CAACD,SAAS,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM4C,eAAe,GAAGA,CAAC7C,SAAS,EAAEC,SAAS,KAAK;EACvD,IAAI2C,kBAAkB,CAAC5C,SAAS,EAAEC,SAAS,CAAC,EAAE;IAC5C,OAAOD,SAAS,CAAC8C,SAAS,CAAC7C,SAAS,CAAC8C,MAAM,CAAC;EAC9C;EACA,OAAO/C,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}