{"ast":null,"code":"/**\r\n * Performance Optimization Utilities\r\n * Provides comprehensive performance optimization for the integrated bridge-student system\r\n */\n\nexport class PerformanceOptimizer {\n  constructor() {\n    this.metrics = {};\n    this.optimizations = [];\n    this.isMonitoring = false;\n  }\n\n  /**\r\n   * Initialize performance monitoring\r\n   */\n  initialize() {\n    if (this.isMonitoring) return;\n    this.startPerformanceMonitoring();\n    this.setupLazyLoading();\n    this.optimizeCSS();\n    this.optimizeImages();\n    this.setupCodeSplitting();\n    this.isMonitoring = true;\n    console.log('ðŸš€ Performance optimization initialized');\n  }\n\n  /**\r\n   * Start performance monitoring\r\n   */\n  startPerformanceMonitoring() {\n    // Monitor Core Web Vitals\n    this.monitorCoreWebVitals();\n\n    // Monitor resource loading\n    this.monitorResourceLoading();\n\n    // Monitor memory usage\n    this.monitorMemoryUsage();\n\n    // Monitor navigation timing\n    this.monitorNavigationTiming();\n  }\n\n  /**\r\n   * Monitor Core Web Vitals\r\n   */\n  monitorCoreWebVitals() {\n    // Largest Contentful Paint (LCP)\n    if (typeof PerformanceObserver !== 'undefined') {\n      try {\n        new PerformanceObserver(entryList => {\n          const entries = entryList.getEntries();\n          const lastEntry = entries[entries.length - 1];\n          this.metrics.lcp = lastEntry.startTime;\n          console.log('ðŸ“Š LCP:', lastEntry.startTime);\n        }).observe({\n          entryTypes: ['largest-contentful-paint']\n        });\n      } catch (e) {\n        console.warn('LCP monitoring not supported');\n      }\n\n      // First Input Delay (FID)\n      try {\n        new PerformanceObserver(entryList => {\n          const entries = entryList.getEntries();\n          entries.forEach(entry => {\n            this.metrics.fid = entry.processingStart - entry.startTime;\n            console.log('ðŸ“Š FID:', entry.processingStart - entry.startTime);\n          });\n        }).observe({\n          entryTypes: ['first-input']\n        });\n      } catch (e) {\n        console.warn('FID monitoring not supported');\n      }\n\n      // Cumulative Layout Shift (CLS)\n      try {\n        let clsValue = 0;\n        new PerformanceObserver(entryList => {\n          const entries = entryList.getEntries();\n          entries.forEach(entry => {\n            if (!entry.hadRecentInput) {\n              clsValue += entry.value;\n            }\n          });\n          this.metrics.cls = clsValue;\n          console.log('ðŸ“Š CLS:', clsValue);\n        }).observe({\n          entryTypes: ['layout-shift']\n        });\n      } catch (e) {\n        console.warn('CLS monitoring not supported');\n      }\n    }\n  }\n\n  /**\r\n   * Monitor resource loading\r\n   */\n  monitorResourceLoading() {\n    if (typeof PerformanceObserver !== 'undefined') {\n      try {\n        const observer = new PerformanceObserver(list => {\n          const entries = list.getEntries();\n          entries.forEach(entry => {\n            if (entry.entryType === 'resource') {\n              const resourceType = this.getResourceType(entry.name);\n              if (!this.metrics.resources) this.metrics.resources = {};\n              if (!this.metrics.resources[resourceType]) this.metrics.resources[resourceType] = [];\n              this.metrics.resources[resourceType].push({\n                name: entry.name,\n                duration: entry.duration,\n                size: entry.transferSize,\n                startTime: entry.startTime\n              });\n            }\n          });\n        });\n        observer.observe({\n          entryTypes: ['resource']\n        });\n      } catch (e) {\n        console.warn('Resource monitoring not supported');\n      }\n    }\n  }\n\n  /**\r\n   * Monitor memory usage\r\n   */\n  monitorMemoryUsage() {\n    if (performance.memory) {\n      setInterval(() => {\n        this.metrics.memory = {\n          used: performance.memory.usedJSHeapSize,\n          total: performance.memory.totalJSHeapSize,\n          limit: performance.memory.jsHeapSizeLimit,\n          timestamp: Date.now()\n        };\n      }, 5000); // Check every 5 seconds\n    }\n  }\n\n  /**\r\n   * Monitor navigation timing\r\n   */\n  monitorNavigationTiming() {\n    window.addEventListener('load', () => {\n      const navigation = performance.getEntriesByType('navigation')[0];\n      if (navigation) {\n        this.metrics.navigation = {\n          domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\n          loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\n          totalTime: navigation.loadEventEnd - navigation.fetchStart,\n          dnsLookup: navigation.domainLookupEnd - navigation.domainLookupStart,\n          tcpConnect: navigation.connectEnd - navigation.connectStart,\n          serverResponse: navigation.responseEnd - navigation.requestStart\n        };\n        console.log('ðŸ“Š Navigation Timing:', this.metrics.navigation);\n      }\n    });\n  }\n\n  /**\r\n   * Setup lazy loading for images and components\r\n   */\n  setupLazyLoading() {\n    // Lazy load images\n    if (typeof IntersectionObserver !== 'undefined') {\n      const images = document.querySelectorAll('img[data-src]');\n      const imageObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target;\n            img.src = img.dataset.src;\n            img.removeAttribute('data-src');\n            imageObserver.unobserve(img);\n          }\n        });\n      });\n      images.forEach(img => imageObserver.observe(img));\n    }\n    this.optimizations.push({\n      type: 'lazy-loading',\n      description: 'Image lazy loading implemented',\n      impact: 'Reduced initial page load time'\n    });\n  }\n\n  /**\r\n   * Optimize CSS loading and delivery\r\n   */\n  optimizeCSS() {\n    // Preload critical CSS\n    const criticalCSS = ['/static/css/main.css'];\n    criticalCSS.forEach(href => {\n      const link = document.createElement('link');\n      link.rel = 'preload';\n      link.as = 'style';\n      link.href = href;\n      link.onload = function () {\n        this.rel = 'stylesheet';\n      };\n      document.head.appendChild(link);\n    });\n    this.optimizations.push({\n      type: 'css-optimization',\n      description: 'CSS preloading implemented',\n      impact: 'Faster CSS loading and rendering'\n    });\n  }\n\n  /**\r\n   * Optimize images\r\n   */\n  optimizeImages() {\n    // Add loading=\"lazy\" to images without it\n    const images = document.querySelectorAll('img:not([loading])');\n    images.forEach(img => {\n      img.loading = 'lazy';\n    });\n    this.optimizations.push({\n      type: 'image-optimization',\n      description: 'Native lazy loading added to images',\n      impact: 'Reduced bandwidth usage and faster page loads'\n    });\n  }\n\n  /**\r\n   * Setup code splitting optimization\r\n   */\n  setupCodeSplitting() {\n    this.optimizations.push({\n      type: 'code-splitting',\n      description: 'Component-based code splitting ready for implementation',\n      impact: 'Smaller initial bundle size'\n    });\n  }\n\n  /**\r\n   * Get resource type from URL\r\n   */\n  getResourceType(url) {\n    if (url.endsWith('.css')) return 'css';\n    if (url.endsWith('.js')) return 'javascript';\n    if (url.match(/\\.(jpg|jpeg|png|gif|webp|svg)$/)) return 'image';\n    if (url.match(/\\.(woff|woff2|ttf|eot)$/)) return 'font';\n    return 'other';\n  }\n\n  /**\r\n   * Get performance metrics\r\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      timestamp: Date.now(),\n      optimizations: this.optimizations\n    };\n  }\n\n  /**\r\n   * Get performance score\r\n   */\n  getPerformanceScore() {\n    const score = {\n      lcp: this.scoreLCP(this.metrics.lcp),\n      fid: this.scoreFID(this.metrics.fid),\n      cls: this.scoreCLS(this.metrics.cls),\n      overall: 0\n    };\n    score.overall = (score.lcp + score.fid + score.cls) / 3;\n    return score;\n  }\n\n  /**\r\n   * Score LCP (Largest Contentful Paint)\r\n   */\n  scoreLCP(lcp) {\n    if (!lcp) return 0;\n    if (lcp <= 2500) return 100; // Good\n    if (lcp <= 4000) return 50; // Needs improvement\n    return 0; // Poor\n  }\n\n  /**\r\n   * Score FID (First Input Delay)\r\n   */\n  scoreFID(fid) {\n    if (!fid) return 100; // No delay recorded\n    if (fid <= 100) return 100; // Good\n    if (fid <= 300) return 50; // Needs improvement\n    return 0; // Poor\n  }\n\n  /**\r\n   * Score CLS (Cumulative Layout Shift)\r\n   */\n  scoreCLS(cls) {\n    if (cls === undefined) return 0;\n    if (cls <= 0.1) return 100; // Good\n    if (cls <= 0.25) return 50; // Needs improvement\n    return 0; // Poor\n  }\n\n  /**\r\n   * Generate performance report\r\n   */\n  generateReport() {\n    const metrics = this.getMetrics();\n    const score = this.getPerformanceScore();\n    return {\n      timestamp: new Date().toISOString(),\n      metrics,\n      score,\n      recommendations: this.getRecommendations(metrics, score),\n      optimizations: this.optimizations\n    };\n  }\n\n  /**\r\n   * Get performance recommendations\r\n   */\n  getRecommendations(metrics, score) {\n    const recommendations = [];\n    if (score.lcp < 50) {\n      recommendations.push({\n        type: 'lcp',\n        priority: 'high',\n        message: 'Optimize Largest Contentful Paint by reducing server response times and optimizing critical resources'\n      });\n    }\n    if (score.fid < 50) {\n      recommendations.push({\n        type: 'fid',\n        priority: 'high',\n        message: 'Reduce First Input Delay by minimizing JavaScript execution time and breaking up long tasks'\n      });\n    }\n    if (score.cls < 50) {\n      recommendations.push({\n        type: 'cls',\n        priority: 'medium',\n        message: 'Minimize Cumulative Layout Shift by setting dimensions for images and avoiding dynamic content insertion'\n      });\n    }\n    if (metrics.memory && metrics.memory.used > metrics.memory.limit * 0.8) {\n      recommendations.push({\n        type: 'memory',\n        priority: 'high',\n        message: 'High memory usage detected. Consider optimizing component lifecycle and removing memory leaks'\n      });\n    }\n    return recommendations;\n  }\n}\n\n// Create singleton instances\nexport const performanceOptimizer = new PerformanceOptimizer();\n\n/**\r\n * Initialize performance optimization\r\n */\nexport const initializePerformanceOptimization = () => {\n  performanceOptimizer.initialize();\n  console.log('ðŸš€ Performance optimization system initialized');\n};\n\n/**\r\n * Get comprehensive performance data\r\n */\nexport const getPerformanceData = () => {\n  return {\n    optimizer: performanceOptimizer.generateReport(),\n    timestamp: new Date().toISOString()\n  };\n};\nexport default PerformanceOptimizer;","map":{"version":3,"names":["PerformanceOptimizer","constructor","metrics","optimizations","isMonitoring","initialize","startPerformanceMonitoring","setupLazyLoading","optimizeCSS","optimizeImages","setupCodeSplitting","console","log","monitorCoreWebVitals","monitorResourceLoading","monitorMemoryUsage","monitorNavigationTiming","PerformanceObserver","entryList","entries","getEntries","lastEntry","length","lcp","startTime","observe","entryTypes","e","warn","forEach","entry","fid","processingStart","clsValue","hadRecentInput","value","cls","observer","list","entryType","resourceType","getResourceType","name","resources","push","duration","size","transferSize","performance","memory","setInterval","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","timestamp","Date","now","window","addEventListener","navigation","getEntriesByType","domContentLoaded","domContentLoadedEventEnd","domContentLoadedEventStart","loadComplete","loadEventEnd","loadEventStart","totalTime","fetchStart","dnsLookup","domainLookupEnd","domainLookupStart","tcpConnect","connectEnd","connectStart","serverResponse","responseEnd","requestStart","IntersectionObserver","images","document","querySelectorAll","imageObserver","isIntersecting","img","target","src","dataset","removeAttribute","unobserve","type","description","impact","criticalCSS","href","link","createElement","rel","as","onload","head","appendChild","loading","url","endsWith","match","getMetrics","getPerformanceScore","score","scoreLCP","scoreFID","scoreCLS","overall","undefined","generateReport","toISOString","recommendations","getRecommendations","priority","message","performanceOptimizer","initializePerformanceOptimization","getPerformanceData","optimizer"],"sources":["D:/MCA/BPUT_Hackathon/Last_hope/bridge/src/utils/performanceOptimizer.js"],"sourcesContent":["/**\r\n * Performance Optimization Utilities\r\n * Provides comprehensive performance optimization for the integrated bridge-student system\r\n */\r\n\r\nexport class PerformanceOptimizer {\r\n  constructor() {\r\n    this.metrics = {};\r\n    this.optimizations = [];\r\n    this.isMonitoring = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize performance monitoring\r\n   */\r\n  initialize() {\r\n    if (this.isMonitoring) return;\r\n\r\n    this.startPerformanceMonitoring();\r\n    this.setupLazyLoading();\r\n    this.optimizeCSS();\r\n    this.optimizeImages();\r\n    this.setupCodeSplitting();\r\n    \r\n    this.isMonitoring = true;\r\n    console.log('ðŸš€ Performance optimization initialized');\r\n  }\r\n\r\n  /**\r\n   * Start performance monitoring\r\n   */\r\n  startPerformanceMonitoring() {\r\n    // Monitor Core Web Vitals\r\n    this.monitorCoreWebVitals();\r\n    \r\n    // Monitor resource loading\r\n    this.monitorResourceLoading();\r\n    \r\n    // Monitor memory usage\r\n    this.monitorMemoryUsage();\r\n    \r\n    // Monitor navigation timing\r\n    this.monitorNavigationTiming();\r\n  }\r\n\r\n  /**\r\n   * Monitor Core Web Vitals\r\n   */\r\n  monitorCoreWebVitals() {\r\n    // Largest Contentful Paint (LCP)\r\n    if (typeof PerformanceObserver !== 'undefined') {\r\n      try {\r\n        new PerformanceObserver((entryList) => {\r\n          const entries = entryList.getEntries();\r\n          const lastEntry = entries[entries.length - 1];\r\n          this.metrics.lcp = lastEntry.startTime;\r\n          console.log('ðŸ“Š LCP:', lastEntry.startTime);\r\n        }).observe({ entryTypes: ['largest-contentful-paint'] });\r\n      } catch (e) {\r\n        console.warn('LCP monitoring not supported');\r\n      }\r\n\r\n      // First Input Delay (FID)\r\n      try {\r\n        new PerformanceObserver((entryList) => {\r\n          const entries = entryList.getEntries();\r\n          entries.forEach(entry => {\r\n            this.metrics.fid = entry.processingStart - entry.startTime;\r\n            console.log('ðŸ“Š FID:', entry.processingStart - entry.startTime);\r\n          });\r\n        }).observe({ entryTypes: ['first-input'] });\r\n      } catch (e) {\r\n        console.warn('FID monitoring not supported');\r\n      }\r\n\r\n      // Cumulative Layout Shift (CLS)\r\n      try {\r\n        let clsValue = 0;\r\n        new PerformanceObserver((entryList) => {\r\n          const entries = entryList.getEntries();\r\n          entries.forEach(entry => {\r\n            if (!entry.hadRecentInput) {\r\n              clsValue += entry.value;\r\n            }\r\n          });\r\n          this.metrics.cls = clsValue;\r\n          console.log('ðŸ“Š CLS:', clsValue);\r\n        }).observe({ entryTypes: ['layout-shift'] });\r\n      } catch (e) {\r\n        console.warn('CLS monitoring not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor resource loading\r\n   */\r\n  monitorResourceLoading() {\r\n    if (typeof PerformanceObserver !== 'undefined') {\r\n      try {\r\n        const observer = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach(entry => {\r\n            if (entry.entryType === 'resource') {\r\n              const resourceType = this.getResourceType(entry.name);\r\n              if (!this.metrics.resources) this.metrics.resources = {};\r\n              if (!this.metrics.resources[resourceType]) this.metrics.resources[resourceType] = [];\r\n              \r\n              this.metrics.resources[resourceType].push({\r\n                name: entry.name,\r\n                duration: entry.duration,\r\n                size: entry.transferSize,\r\n                startTime: entry.startTime\r\n              });\r\n            }\r\n          });\r\n        });\r\n        \r\n        observer.observe({ entryTypes: ['resource'] });\r\n      } catch (e) {\r\n        console.warn('Resource monitoring not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor memory usage\r\n   */\r\n  monitorMemoryUsage() {\r\n    if (performance.memory) {\r\n      setInterval(() => {\r\n        this.metrics.memory = {\r\n          used: performance.memory.usedJSHeapSize,\r\n          total: performance.memory.totalJSHeapSize,\r\n          limit: performance.memory.jsHeapSizeLimit,\r\n          timestamp: Date.now()\r\n        };\r\n      }, 5000); // Check every 5 seconds\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor navigation timing\r\n   */\r\n  monitorNavigationTiming() {\r\n    window.addEventListener('load', () => {\r\n      const navigation = performance.getEntriesByType('navigation')[0];\r\n      if (navigation) {\r\n        this.metrics.navigation = {\r\n          domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n          loadComplete: navigation.loadEventEnd - navigation.loadEventStart,\r\n          totalTime: navigation.loadEventEnd - navigation.fetchStart,\r\n          dnsLookup: navigation.domainLookupEnd - navigation.domainLookupStart,\r\n          tcpConnect: navigation.connectEnd - navigation.connectStart,\r\n          serverResponse: navigation.responseEnd - navigation.requestStart\r\n        };\r\n        console.log('ðŸ“Š Navigation Timing:', this.metrics.navigation);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup lazy loading for images and components\r\n   */\r\n  setupLazyLoading() {\r\n    // Lazy load images\r\n    if (typeof IntersectionObserver !== 'undefined') {\r\n      const images = document.querySelectorAll('img[data-src]');\r\n      const imageObserver = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            const img = entry.target;\r\n            img.src = img.dataset.src;\r\n            img.removeAttribute('data-src');\r\n            imageObserver.unobserve(img);\r\n          }\r\n        });\r\n      });\r\n\r\n      images.forEach(img => imageObserver.observe(img));\r\n    }\r\n\r\n    this.optimizations.push({\r\n      type: 'lazy-loading',\r\n      description: 'Image lazy loading implemented',\r\n      impact: 'Reduced initial page load time'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimize CSS loading and delivery\r\n   */\r\n  optimizeCSS() {\r\n    // Preload critical CSS\r\n    const criticalCSS = [\r\n      '/static/css/main.css'\r\n    ];\r\n\r\n    criticalCSS.forEach(href => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preload';\r\n      link.as = 'style';\r\n      link.href = href;\r\n      link.onload = function() { this.rel = 'stylesheet'; };\r\n      document.head.appendChild(link);\r\n    });\r\n\r\n    this.optimizations.push({\r\n      type: 'css-optimization',\r\n      description: 'CSS preloading implemented',\r\n      impact: 'Faster CSS loading and rendering'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimize images\r\n   */\r\n  optimizeImages() {\r\n    // Add loading=\"lazy\" to images without it\r\n    const images = document.querySelectorAll('img:not([loading])');\r\n    images.forEach(img => {\r\n      img.loading = 'lazy';\r\n    });\r\n\r\n    this.optimizations.push({\r\n      type: 'image-optimization',\r\n      description: 'Native lazy loading added to images',\r\n      impact: 'Reduced bandwidth usage and faster page loads'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup code splitting optimization\r\n   */\r\n  setupCodeSplitting() {\r\n    this.optimizations.push({\r\n      type: 'code-splitting',\r\n      description: 'Component-based code splitting ready for implementation',\r\n      impact: 'Smaller initial bundle size'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get resource type from URL\r\n   */\r\n  getResourceType(url) {\r\n    if (url.endsWith('.css')) return 'css';\r\n    if (url.endsWith('.js')) return 'javascript';\r\n    if (url.match(/\\.(jpg|jpeg|png|gif|webp|svg)$/)) return 'image';\r\n    if (url.match(/\\.(woff|woff2|ttf|eot)$/)) return 'font';\r\n    return 'other';\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  getMetrics() {\r\n    return {\r\n      ...this.metrics,\r\n      timestamp: Date.now(),\r\n      optimizations: this.optimizations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get performance score\r\n   */\r\n  getPerformanceScore() {\r\n    const score = {\r\n      lcp: this.scoreLCP(this.metrics.lcp),\r\n      fid: this.scoreFID(this.metrics.fid),\r\n      cls: this.scoreCLS(this.metrics.cls),\r\n      overall: 0\r\n    };\r\n\r\n    score.overall = (score.lcp + score.fid + score.cls) / 3;\r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Score LCP (Largest Contentful Paint)\r\n   */\r\n  scoreLCP(lcp) {\r\n    if (!lcp) return 0;\r\n    if (lcp <= 2500) return 100; // Good\r\n    if (lcp <= 4000) return 50;  // Needs improvement\r\n    return 0; // Poor\r\n  }\r\n\r\n  /**\r\n   * Score FID (First Input Delay)\r\n   */\r\n  scoreFID(fid) {\r\n    if (!fid) return 100; // No delay recorded\r\n    if (fid <= 100) return 100; // Good\r\n    if (fid <= 300) return 50;  // Needs improvement\r\n    return 0; // Poor\r\n  }\r\n\r\n  /**\r\n   * Score CLS (Cumulative Layout Shift)\r\n   */\r\n  scoreCLS(cls) {\r\n    if (cls === undefined) return 0;\r\n    if (cls <= 0.1) return 100; // Good\r\n    if (cls <= 0.25) return 50; // Needs improvement\r\n    return 0; // Poor\r\n  }\r\n\r\n  /**\r\n   * Generate performance report\r\n   */\r\n  generateReport() {\r\n    const metrics = this.getMetrics();\r\n    const score = this.getPerformanceScore();\r\n\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      metrics,\r\n      score,\r\n      recommendations: this.getRecommendations(metrics, score),\r\n      optimizations: this.optimizations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get performance recommendations\r\n   */\r\n  getRecommendations(metrics, score) {\r\n    const recommendations = [];\r\n\r\n    if (score.lcp < 50) {\r\n      recommendations.push({\r\n        type: 'lcp',\r\n        priority: 'high',\r\n        message: 'Optimize Largest Contentful Paint by reducing server response times and optimizing critical resources'\r\n      });\r\n    }\r\n\r\n    if (score.fid < 50) {\r\n      recommendations.push({\r\n        type: 'fid',\r\n        priority: 'high',\r\n        message: 'Reduce First Input Delay by minimizing JavaScript execution time and breaking up long tasks'\r\n      });\r\n    }\r\n\r\n    if (score.cls < 50) {\r\n      recommendations.push({\r\n        type: 'cls',\r\n        priority: 'medium',\r\n        message: 'Minimize Cumulative Layout Shift by setting dimensions for images and avoiding dynamic content insertion'\r\n      });\r\n    }\r\n\r\n    if (metrics.memory && metrics.memory.used > metrics.memory.limit * 0.8) {\r\n      recommendations.push({\r\n        type: 'memory',\r\n        priority: 'high',\r\n        message: 'High memory usage detected. Consider optimizing component lifecycle and removing memory leaks'\r\n      });\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n}\r\n\r\n// Create singleton instances\r\nexport const performanceOptimizer = new PerformanceOptimizer();\r\n\r\n/**\r\n * Initialize performance optimization\r\n */\r\nexport const initializePerformanceOptimization = () => {\r\n  performanceOptimizer.initialize();\r\n  console.log('ðŸš€ Performance optimization system initialized');\r\n};\r\n\r\n/**\r\n * Get comprehensive performance data\r\n */\r\nexport const getPerformanceData = () => {\r\n  return {\r\n    optimizer: performanceOptimizer.generateReport(),\r\n    timestamp: new Date().toISOString()\r\n  };\r\n};\r\n\r\nexport default PerformanceOptimizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}